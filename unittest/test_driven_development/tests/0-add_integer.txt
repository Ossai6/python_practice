The ``0-add_integer`` module

Importing the function from the module:
	>>> add_integer = __import__("0-add_integer").add_integer

Checking for module docstring:
	 >>> m = __import__("0-add_integer").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("0-add_integer").add_integer.__doc__
         >>> len(f) > 1
         True

checking normal addition:
	>>> add_integer(5, 9)
	14

checking positive with negative:
	>>> add_integer(5, -9)
	-4

checking negative with positive:
	>>> add_integer(-3, 8)
	5

checking addition over multiple values:
	>>> [add_integer(i, i*3) for i in range(5)]
	[0, 4, 8, 12, 16]

checking float with int:
	>>> add_integer(5.3, 9)
	14

checking int with floar:
	>>> add_integer(7, 3.45)
	10

checking both float:
	>>> add_integer(5.9, 5.9)
	10

checking both negative:
	>>> add_integer(-8, -6)
	-14

checking long int:
	>>> add_integer(999999999999999999999, 888888888888888888888)
	1888888888888888888887

checking for non number with number:
	>>> add_integer('a', 6)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

checking for number with non number:
	>>> add_integer(6, 'a')
	Traceback (most recent call last):
        ...
	TypeError: b must be an integer

checking bool with number:
	>>> add_integer(True, 7)
	Traceback (most recent call last):
        ...
	TypeError: a must be an integer

checking number with bool:
	>>> add_integer(8, False)
        Traceback (most recent call last):
        ...
        TypeError: b must be an integer

checking one arg:
	>>> add_integer(7)
        105

checking no args:
	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'

checking more than 2 args:
	>>> add_integer(1, 5, 7)
	Traceback (most recent call last):
	...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

